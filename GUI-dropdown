import { useEffect, useRef } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import GUI from "lil-gui";

function Dropdown() {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;

    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);

    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x000000);

    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    const material = new THREE.MeshStandardMaterial({ color: 0x00ff00 });

    let cube = new THREE.Mesh(new THREE.BoxGeometry(), material);
    cube.position.set(0, 0, 0);
    scene.add(cube);

    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enablePan = false;

    const gui = new GUI();

    // Shape options
    const shapeOptions = { Cube: "cube", Sphere: "sphere", Cylinder: "cylinder" };
    const setting = { shape: "cube", animation: "none" };

    gui
      .add(setting, "shape", shapeOptions)
      .name("Shape")
      .onChange((value) => {
        scene.remove(cube);

        let geometry;
        if (value === "cube") geometry = new THREE.BoxGeometry();
        else if (value === "sphere") geometry = new THREE.SphereGeometry(1, 32, 32);
        else if (value === "cylinder") geometry = new THREE.CylinderGeometry(1, 1, 2, 32);

        cube = new THREE.Mesh(geometry, material);
        cube.position.set(0, 0, 0);
        scene.add(cube);
      });

    // Animation options
    const animationOptions = {
      None: "none",
      Rotate: "rotate",
      Bounce: "bounce",
    };

    gui.add(setting, "animation", animationOptions).name("Animation");

    const animate = () => {
      requestAnimationFrame(animate);

      if (setting.animation === "rotate") {
        cube.rotation.x += 0.01;
        cube.rotation.y += 0.01;
      } else if (setting.animation === "bounce") {
        cube.position.y = Math.sin(performance.now() * 0.002) * 2;
      }

      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      renderer.dispose();
      gui.destroy();
    };
  }, []);

  return (
    <canvas
      className="w-[90vw] h-[70vh] rounded-lg border-8 border-white shadow-xl transform hover:scale-105 transition-transform duration-300"
      ref={canvasRef}
    />
  );
}

export default Dropdown;
