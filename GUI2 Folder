import { useEffect, useRef } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import GUI from "lil-gui";

function Folder() {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;

    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);

    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x000000);

    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    const geometry = new THREE.BoxGeometry();
    const material = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
    const cube = new THREE.Mesh(geometry, material);
    cube.position.set(0, 0, 2);
    scene.add(cube);

    const controls = new OrbitControls(camera, renderer.domElement);

    const gui = new GUI();

    // Settings object for main controls
    const settings = {
      size: 1,
      posX: cube.position.x,
      posY: cube.position.y,
      posZ: cube.position.z,
      rotX: cube.rotation.x,
      rotY: cube.rotation.y,
      rotZ: cube.rotation.z,
    };

    // Settings object for appearance controls
    const appearanceSettings = {
      visible: true,
      wireframe: false,
    };

    // Main folder for size, position, rotation
    const sizefolder = gui.addFolder("Size, Position & Rotation");

    // Size control
    sizefolder
      .add(settings, "size", 0.1, 5)
      .name("Size")
      .onChange((value) => {
        cube.scale.set(value, value, value);
      });

    // Position controls
    sizefolder
      .add(settings, "posX", -10, 10)
      .name("Position X")
      .onChange((value) => {
        cube.position.x = value;
      });
    sizefolder
      .add(settings, "posY", -10, 10)
      .name("Position Y")
      .onChange((value) => {
        cube.position.y = value;
      });
    sizefolder
      .add(settings, "posZ", -10, 10)
      .name("Position Z")
      .onChange((value) => {
        cube.position.z = value;
      });

    // Rotation controls (in radians)
    sizefolder
      .add(settings, "rotX", 0, Math.PI * 2)
      .name("Rotation X")
      .onChange((value) => {
        cube.rotation.x = value;
      });
    sizefolder
      .add(settings, "rotY", 0, Math.PI * 2)
      .name("Rotation Y")
      .onChange((value) => {
        cube.rotation.y = value;
      });
    sizefolder
      .add(settings, "rotZ", 0, Math.PI * 2)
      .name("Rotation Z")
      .onChange((value) => {
        cube.rotation.z = value;
      });

    // Nested folder for appearance
    const appearanceFolder = sizefolder.addFolder("Appearance");

    appearanceFolder
      .add(appearanceSettings, "visible")
      .name("Visible")
      .onChange((value) => {
        cube.visible = value;
      });

    appearanceFolder
      .add(appearanceSettings, "wireframe")
      .name("Wireframe")
      .onChange((value) => {
        cube.material.wireframe = value;
      });

    // Open folders by default
    sizefolder.open();
    appearanceFolder.open();

    const animate = () => {
      requestAnimationFrame(animate);

      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      renderer.dispose();
      gui.destroy();
    };
  }, []);

  return (
    <canvas
      className="w-[90vw] h-[70vh] rounded-lg border-8 border-white shadow-xl transform hover:scale-105 transition-transform duration-300"
      ref={canvasRef}
    />
  );
}

export default Folder;
