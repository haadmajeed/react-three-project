import { useEffect, useRef } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import GUI from "lil-gui";
function Color() {
    const canvasRef = useRef(null);

    useEffect(() => {

        const canvas = canvasRef.current;

        const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);

        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x000000);

        const camera = new THREE.PerspectiveCamera(
            75,
            window.innerWidth / window.innerHeight,
            0.1,
            1000
        );
        camera.position.z = 5;

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
        directionalLight.position.set(5, 5, 5);
        scene.add(directionalLight);

        const geometry = new THREE.BoxGeometry();
        const material = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
        const cube = new THREE.Mesh(geometry, material);
        cube.position.set(0, 0, 2);
        scene.add(cube);

        const controls = new OrbitControls(camera, renderer.domElement);


        const gui = new GUI();

        // const setting = { size: 1 };
        // gui.add(setting, "size", 0.1, 5).onChange((value) => {
        //     cube.scale.set(value, value, value);
        // });
        const setting = { color: "green" }
        gui.addColor(setting, "color").onChange((value) => {
            cube.material.color.set(value);
        })

        const sceneSetting = { background: "#030659" }
        gui.addColor(sceneSetting, "background").onChange((value) => {
            scene.background = new THREE.Color(value)
        })


        const settings = { visible: true };
        gui.add(settings, "visible").onChange((value) => {
            cube.material.visible = value
        })
        const settingss = { wireframe: false };
        gui.add(settingss, "wireframe").onChange((value) => {
            cube.material.wireframe = value
        })



        const animate = () => {
            requestAnimationFrame(animate);

            cube.rotation.x += 0.01;
            cube.rotation.y += 0.01;

            controls.update();
            renderer.render(scene, camera);
        };
        animate();

        return () => {
            renderer.dispose();
        };
    }, []);

    return (


        <canvas
            className="w-[90vw] h-[70vh] rounded-lg border-8 border-white shadow-xl transform hover:scale-105 transition-transform duration-300"
            ref={canvasRef}
        />

    );
}

export default Color;
